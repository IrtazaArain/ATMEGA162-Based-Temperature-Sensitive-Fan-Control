
FanControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006a  00800100  000003b2  00000426  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e12  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000777  00000000  00000000  00001366  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005c4  00000000  00000000  00001add  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  000020a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e8  00000000  00000000  00002144  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000048f  00000000  00000000  0000252c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000029bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e2 eb       	ldi	r30, 0xB2	; 178
  84:	f3 e0       	ldi	r31, 0x03	; 3
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	aa 36       	cpi	r26, 0x6A	; 106
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	aa e6       	ldi	r26, 0x6A	; 106
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	aa 36       	cpi	r26, 0x6A	; 106
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 44 01 	call	0x288	; 0x288 <main>
  a6:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <KEYPAD_getKey>:
	return 0;
}

// Function to read a key from the keypad
char KEYPAD_getKey() {
	PORTD=0b11111011;
  ae:	8b ef       	ldi	r24, 0xFB	; 251
  b0:	82 bb       	out	0x12, r24	; 18
	if ((PIND & (1<<PIND4))==0){
  b2:	84 99       	sbic	0x10, 4	; 16
  b4:	08 c0       	rjmp	.+16     	; 0xc6 <KEYPAD_getKey+0x18>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	81 e1       	ldi	r24, 0x11	; 17
  b8:	9a e7       	ldi	r25, 0x7A	; 122
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <KEYPAD_getKey+0xc>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <KEYPAD_getKey+0x12>
  c0:	00 00       	nop
		_delay_ms(125);
		return '1';
  c2:	81 e3       	ldi	r24, 0x31	; 49
  c4:	08 95       	ret
	}
	else if((PIND & (1<<PIND5))==0){
  c6:	85 99       	sbic	0x10, 5	; 16
  c8:	08 c0       	rjmp	.+16     	; 0xda <KEYPAD_getKey+0x2c>
  ca:	81 e1       	ldi	r24, 0x11	; 17
  cc:	9a e7       	ldi	r25, 0x7A	; 122
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <KEYPAD_getKey+0x20>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <KEYPAD_getKey+0x26>
  d4:	00 00       	nop
		_delay_ms(125);
		return '2';
  d6:	82 e3       	ldi	r24, 0x32	; 50
  d8:	08 95       	ret
	}
	else if((PIND & (1<<PIND6))==0){
  da:	86 99       	sbic	0x10, 6	; 16
  dc:	08 c0       	rjmp	.+16     	; 0xee <KEYPAD_getKey+0x40>
  de:	81 e1       	ldi	r24, 0x11	; 17
  e0:	9a e7       	ldi	r25, 0x7A	; 122
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <KEYPAD_getKey+0x34>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <KEYPAD_getKey+0x3a>
  e8:	00 00       	nop
		_delay_ms(125);
		return '3';
  ea:	83 e3       	ldi	r24, 0x33	; 51
  ec:	08 95       	ret
	}
	PORTD=0b11110111;
  ee:	87 ef       	ldi	r24, 0xF7	; 247
  f0:	82 bb       	out	0x12, r24	; 18
	if ((PIND & (1<<PIND5))==0){
  f2:	85 99       	sbic	0x10, 5	; 16
  f4:	08 c0       	rjmp	.+16     	; 0x106 <KEYPAD_getKey+0x58>
  f6:	81 e1       	ldi	r24, 0x11	; 17
  f8:	9a e7       	ldi	r25, 0x7A	; 122
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <KEYPAD_getKey+0x4c>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <KEYPAD_getKey+0x52>
 100:	00 00       	nop
		_delay_ms(125);
		return '0';
 102:	80 e3       	ldi	r24, 0x30	; 48
 104:	08 95       	ret
	}
}
 106:	08 95       	ret

00000108 <LCD_command>:
}

// Function to send a command to the LCD
void LCD_command(unsigned char cmd) {
	// Send upper nibble
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (cmd & 0xF0);
 108:	9b b3       	in	r25, 0x1b	; 27
 10a:	9f 70       	andi	r25, 0x0F	; 15
 10c:	28 2f       	mov	r18, r24
 10e:	20 7f       	andi	r18, 0xF0	; 240
 110:	92 2b       	or	r25, r18
 112:	9b bb       	out	0x1b, r25	; 27
	LCD_CONTROL_PORT &= ~(1 << LCD_RS_PIN);  // RS = 0 for command
 114:	95 b3       	in	r25, 0x15	; 21
 116:	9e 7f       	andi	r25, 0xFE	; 254
 118:	95 bb       	out	0x15, r25	; 21
	LCD_CONTROL_PORT &= ~(1 << LCD_RW_PIN);  // RW = 0 for write
 11a:	95 b3       	in	r25, 0x15	; 21
 11c:	9d 7f       	andi	r25, 0xFD	; 253
 11e:	95 bb       	out	0x15, r25	; 21
	LCD_CONTROL_PORT |= (1 << LCD_EN_PIN);   // EN = 1 to enable
 120:	95 b3       	in	r25, 0x15	; 21
 122:	94 60       	ori	r25, 0x04	; 4
 124:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	00 00       	nop
	_delay_us(1);
	LCD_CONTROL_PORT &= ~(1 << LCD_EN_PIN);  // EN = 0 to latch data
 128:	95 b3       	in	r25, 0x15	; 21
 12a:	9b 7f       	andi	r25, 0xFB	; 251
 12c:	95 bb       	out	0x15, r25	; 21
 12e:	31 e2       	ldi	r19, 0x21	; 33
 130:	3a 95       	dec	r19
 132:	f1 f7       	brne	.-4      	; 0x130 <LCD_command+0x28>
 134:	00 00       	nop
	
	_delay_us(100);
	
	// Send lower nibble
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (cmd << 4);
 136:	2b b3       	in	r18, 0x1b	; 27
 138:	30 e1       	ldi	r19, 0x10	; 16
 13a:	83 9f       	mul	r24, r19
 13c:	c0 01       	movw	r24, r0
 13e:	11 24       	eor	r1, r1
 140:	92 2f       	mov	r25, r18
 142:	9f 70       	andi	r25, 0x0F	; 15
 144:	89 2b       	or	r24, r25
 146:	8b bb       	out	0x1b, r24	; 27
	LCD_CONTROL_PORT |= (1 << LCD_EN_PIN);   // EN = 1 to enable
 148:	85 b3       	in	r24, 0x15	; 21
 14a:	84 60       	ori	r24, 0x04	; 4
 14c:	85 bb       	out	0x15, r24	; 21
 14e:	00 00       	nop
	_delay_us(1);
	LCD_CONTROL_PORT &= ~(1 << LCD_EN_PIN);  // EN = 0 to latch data
 150:	85 b3       	in	r24, 0x15	; 21
 152:	8b 7f       	andi	r24, 0xFB	; 251
 154:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 156:	83 ef       	ldi	r24, 0xF3	; 243
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <LCD_command+0x52>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <LCD_command+0x58>
 160:	00 00       	nop
 162:	08 95       	ret

00000164 <LCD_init>:
}
// Function to initialize the LCD
void LCD_init() {
	
	// Configure LCD control pins as outputs
	DDRC |= (1 << LCD_RS_PIN) | (1 << LCD_RW_PIN) | (1 << LCD_EN_PIN);
 164:	84 b3       	in	r24, 0x14	; 20
 166:	87 60       	ori	r24, 0x07	; 7
 168:	84 bb       	out	0x14, r24	; 20
	
	// Configure LCD data port as outputs
	DDRA = 0xFF;
 16a:	8f ef       	ldi	r24, 0xFF	; 255
 16c:	8a bb       	out	0x1a, r24	; 26
 16e:	85 ea       	ldi	r24, 0xA5	; 165
 170:	9e e0       	ldi	r25, 0x0E	; 14
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <LCD_init+0xe>
 176:	00 c0       	rjmp	.+0      	; 0x178 <LCD_init+0x14>
 178:	00 00       	nop
	
	// Initialize LCD in 4-bit mode
	_delay_ms(15);               // Wait for LCD to power up
	LCD_command(0x02);           // Return Home
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	0e 94 84 00 	call	0x108	; 0x108 <LCD_command>
	LCD_command(0x28);           // 4-bit, 2-line, 5x8 font
 180:	88 e2       	ldi	r24, 0x28	; 40
 182:	0e 94 84 00 	call	0x108	; 0x108 <LCD_command>
	LCD_command(0x0C);           // Display ON, Cursor OFF
 186:	8c e0       	ldi	r24, 0x0C	; 12
 188:	0e 94 84 00 	call	0x108	; 0x108 <LCD_command>
	LCD_command(0x06);           // Entry mode - Auto-increment cursor
 18c:	86 e0       	ldi	r24, 0x06	; 6
 18e:	0e 94 84 00 	call	0x108	; 0x108 <LCD_command>
	LCD_command(0x01);           // Clear display
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	0e 94 84 00 	call	0x108	; 0x108 <LCD_command>
 198:	83 ef       	ldi	r24, 0xF3	; 243
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <LCD_init+0x38>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <LCD_init+0x3e>
 1a2:	00 00       	nop
 1a4:	08 95       	ret

000001a6 <LCD_data>:
}

// Function to send data to the LCD
void LCD_data(unsigned char data) {
	// Send upper nibble
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
 1a6:	9b b3       	in	r25, 0x1b	; 27
 1a8:	9f 70       	andi	r25, 0x0F	; 15
 1aa:	28 2f       	mov	r18, r24
 1ac:	20 7f       	andi	r18, 0xF0	; 240
 1ae:	92 2b       	or	r25, r18
 1b0:	9b bb       	out	0x1b, r25	; 27
	LCD_CONTROL_PORT |= (1 << LCD_RS_PIN);  // RS = 1 for data
 1b2:	95 b3       	in	r25, 0x15	; 21
 1b4:	91 60       	ori	r25, 0x01	; 1
 1b6:	95 bb       	out	0x15, r25	; 21
	LCD_CONTROL_PORT &= ~(1 << LCD_RW_PIN);  // RW = 0 for write
 1b8:	95 b3       	in	r25, 0x15	; 21
 1ba:	9d 7f       	andi	r25, 0xFD	; 253
 1bc:	95 bb       	out	0x15, r25	; 21
	LCD_CONTROL_PORT |= (1 << LCD_EN_PIN);   // EN = 1 to enable
 1be:	95 b3       	in	r25, 0x15	; 21
 1c0:	94 60       	ori	r25, 0x04	; 4
 1c2:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c4:	00 00       	nop
	_delay_us(1);
	LCD_CONTROL_PORT &= ~(1 << LCD_EN_PIN);  // EN = 0 to latch data
 1c6:	95 b3       	in	r25, 0x15	; 21
 1c8:	9b 7f       	andi	r25, 0xFB	; 251
 1ca:	95 bb       	out	0x15, r25	; 21
 1cc:	31 e2       	ldi	r19, 0x21	; 33
 1ce:	3a 95       	dec	r19
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <LCD_data+0x28>
 1d2:	00 00       	nop

	_delay_us(100);

	// Send lower nibble
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data << 4);
 1d4:	2b b3       	in	r18, 0x1b	; 27
 1d6:	30 e1       	ldi	r19, 0x10	; 16
 1d8:	83 9f       	mul	r24, r19
 1da:	c0 01       	movw	r24, r0
 1dc:	11 24       	eor	r1, r1
 1de:	92 2f       	mov	r25, r18
 1e0:	9f 70       	andi	r25, 0x0F	; 15
 1e2:	89 2b       	or	r24, r25
 1e4:	8b bb       	out	0x1b, r24	; 27
	LCD_CONTROL_PORT |= (1 << LCD_EN_PIN);   // EN = 1 to enable
 1e6:	85 b3       	in	r24, 0x15	; 21
 1e8:	84 60       	ori	r24, 0x04	; 4
 1ea:	85 bb       	out	0x15, r24	; 21
 1ec:	00 00       	nop
	_delay_us(1);
	LCD_CONTROL_PORT &= ~(1 << LCD_EN_PIN);  // EN = 0 to latch data
 1ee:	85 b3       	in	r24, 0x15	; 21
 1f0:	8b 7f       	andi	r24, 0xFB	; 251
 1f2:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f4:	83 ef       	ldi	r24, 0xF3	; 243
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <LCD_data+0x52>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <LCD_data+0x58>
 1fe:	00 00       	nop
 200:	08 95       	ret

00000202 <LCD_string>:

	_delay_ms(2);
}
// Function to send a string to the LCD
void LCD_string(const char* str) {
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	ec 01       	movw	r28, r24
	while (*str) {
 208:	03 c0       	rjmp	.+6      	; 0x210 <LCD_string+0xe>
		LCD_data(*str++);
 20a:	21 96       	adiw	r28, 0x01	; 1
 20c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_data>

	_delay_ms(2);
}
// Function to send a string to the LCD
void LCD_string(const char* str) {
	while (*str) {
 210:	88 81       	ld	r24, Y
 212:	81 11       	cpse	r24, r1
 214:	fa cf       	rjmp	.-12     	; 0x20a <LCD_string+0x8>
		LCD_data(*str++);
	}
}
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	08 95       	ret

0000021c <delay_ms>:
// Function to delay for a given number of milliseconds
void delay_ms(uint16_t ms) {
	for (uint16_t i = 0; i < ms; i++) {
 21c:	20 e0       	ldi	r18, 0x00	; 0
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	08 c0       	rjmp	.+16     	; 0x232 <delay_ms+0x16>
 222:	e9 ef       	ldi	r30, 0xF9	; 249
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	31 97       	sbiw	r30, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <delay_ms+0xa>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <delay_ms+0x10>
 22c:	00 00       	nop
 22e:	2f 5f       	subi	r18, 0xFF	; 255
 230:	3f 4f       	sbci	r19, 0xFF	; 255
 232:	28 17       	cp	r18, r24
 234:	39 07       	cpc	r19, r25
 236:	a8 f3       	brcs	.-22     	; 0x222 <delay_ms+0x6>
		_delay_ms(1);
	}
}
 238:	08 95       	ret

0000023a <motorSpeed>:
// Function to control the motor speed
void motorSpeed(uint8_t speed) {
	
	if (TCNT1==5){
 23a:	2c b5       	in	r18, 0x2c	; 44
 23c:	3d b5       	in	r19, 0x2d	; 45
 23e:	25 30       	cpi	r18, 0x05	; 5
 240:	31 05       	cpc	r19, r1
 242:	09 f4       	brne	.+2      	; 0x246 <motorSpeed+0xc>
		PORTB=0;
 244:	18 ba       	out	0x18, r1	; 24
	}
	if(speed==1){
 246:	81 30       	cpi	r24, 0x01	; 1
 248:	49 f4       	brne	.+18     	; 0x25c <motorSpeed+0x22>
		if(TCNT1==20){
 24a:	2c b5       	in	r18, 0x2c	; 44
 24c:	3d b5       	in	r19, 0x2d	; 45
 24e:	24 31       	cpi	r18, 0x14	; 20
 250:	31 05       	cpc	r19, r1
 252:	21 f4       	brne	.+8      	; 0x25c <motorSpeed+0x22>
			PORTB=1;
 254:	91 e0       	ldi	r25, 0x01	; 1
 256:	98 bb       	out	0x18, r25	; 24
			TCNT1=0;
 258:	1d bc       	out	0x2d, r1	; 45
 25a:	1c bc       	out	0x2c, r1	; 44
		}
	}
	if (speed==2){
 25c:	82 30       	cpi	r24, 0x02	; 2
 25e:	49 f4       	brne	.+18     	; 0x272 <motorSpeed+0x38>
		if(TCNT1==10){
 260:	2c b5       	in	r18, 0x2c	; 44
 262:	3d b5       	in	r19, 0x2d	; 45
 264:	2a 30       	cpi	r18, 0x0A	; 10
 266:	31 05       	cpc	r19, r1
 268:	21 f4       	brne	.+8      	; 0x272 <motorSpeed+0x38>
			PORTB=1;
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	98 bb       	out	0x18, r25	; 24
			TCNT1=0;
 26e:	1d bc       	out	0x2d, r1	; 45
 270:	1c bc       	out	0x2c, r1	; 44
		}
		
	}
	if (speed==3){
 272:	83 30       	cpi	r24, 0x03	; 3
 274:	41 f4       	brne	.+16     	; 0x286 <motorSpeed+0x4c>
		if(TCNT1==5){
 276:	8c b5       	in	r24, 0x2c	; 44
 278:	9d b5       	in	r25, 0x2d	; 45
 27a:	05 97       	sbiw	r24, 0x05	; 5
 27c:	21 f4       	brne	.+8      	; 0x286 <motorSpeed+0x4c>
			PORTB=1;
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	88 bb       	out	0x18, r24	; 24
			TCNT1=0;
 282:	1d bc       	out	0x2d, r1	; 45
 284:	1c bc       	out	0x2c, r1	; 44
 286:	08 95       	ret

00000288 <main>:
char key1;
static char count = '0';

int main(void) {
	
	DDRB = 0b00000001;
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	87 bb       	out	0x17, r24	; 23
	TCCR1B |= (1 << CS10) | (1 << CS12) | (1 << WGM10);
 28c:	8e b5       	in	r24, 0x2e	; 46
 28e:	85 60       	ori	r24, 0x05	; 5
 290:	8e bd       	out	0x2e, r24	; 46
	// Initialize peripherals
	LCD_init();
 292:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_init>

	// Display "Welcome" message
	LCD_command(0x80); // Set cursor to first line
 296:	80 e8       	ldi	r24, 0x80	; 128
 298:	0e 94 84 00 	call	0x108	; 0x108 <LCD_command>
	LCD_string("Welcome");
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	0e 94 01 01 	call	0x202	; 0x202 <LCD_string>

	// Delay for a certain period
	delay_ms(2000); // Delay for 2 seconds
 2a4:	80 ed       	ldi	r24, 0xD0	; 208
 2a6:	97 e0       	ldi	r25, 0x07	; 7
 2a8:	0e 94 0e 01 	call	0x21c	; 0x21c <delay_ms>

	// Clear the display
	LCD_command(0x01); // Clear display
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	0e 94 84 00 	call	0x108	; 0x108 <LCD_command>

	// Display "Fan Status: ON" message
	LCD_command(0x80); // Set cursor to first line
 2b2:	80 e8       	ldi	r24, 0x80	; 128
 2b4:	0e 94 84 00 	call	0x108	; 0x108 <LCD_command>
	LCD_string("Fan Status: ON");
 2b8:	89 e0       	ldi	r24, 0x09	; 9
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	0e 94 01 01 	call	0x202	; 0x202 <LCD_string>

	// Delay for a certain period
	delay_ms(2000); // Delay for 2 seconds
 2c0:	80 ed       	ldi	r24, 0xD0	; 208
 2c2:	97 e0       	ldi	r25, 0x07	; 7
 2c4:	0e 94 0e 01 	call	0x21c	; 0x21c <delay_ms>

	// Clear the display
	LCD_command(0x01); // Clear display
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	0e 94 84 00 	call	0x108	; 0x108 <LCD_command>

	LCD_string("Press a key");
 2ce:	88 e1       	ldi	r24, 0x18	; 24
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	0e 94 01 01 	call	0x202	; 0x202 <LCD_string>

	KEY_DDR = 0x0F;
 2d6:	8f e0       	ldi	r24, 0x0F	; 15
 2d8:	81 bb       	out	0x11, r24	; 17
	KEY_PRT = 0xF0;
 2da:	80 ef       	ldi	r24, 0xF0	; 240
 2dc:	82 bb       	out	0x12, r24	; 18
	char key;

	// Main program loop
	while (1) {
		KEY_PRT=0xF0;
 2de:	80 ef       	ldi	r24, 0xF0	; 240
 2e0:	82 bb       	out	0x12, r24	; 18
		if (KEY_PIN!=0xF0){
 2e2:	80 b3       	in	r24, 0x10	; 16
 2e4:	80 3f       	cpi	r24, 0xF0	; 240
 2e6:	31 f0       	breq	.+12     	; 0x2f4 <main+0x6c>
			key=KEYPAD_getKey();
 2e8:	0e 94 57 00 	call	0xae	; 0xae <KEYPAD_getKey>
 2ec:	c8 2f       	mov	r28, r24
			count='0';
 2ee:	80 e3       	ldi	r24, 0x30	; 48
 2f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		}
		// Read keypad input
		// Process keypad input
		if (key == '1') {
 2f4:	c1 33       	cpi	r28, 0x31	; 49
 2f6:	a1 f4       	brne	.+40     	; 0x320 <main+0x98>
			if (count == '0') {
 2f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2fc:	80 33       	cpi	r24, 0x30	; 48
 2fe:	61 f4       	brne	.+24     	; 0x318 <main+0x90>
				LCD_command(0x80); // Set cursor to first line
 300:	80 e8       	ldi	r24, 0x80	; 128
 302:	0e 94 84 00 	call	0x108	; 0x108 <LCD_command>
				LCD_string("Fan Status: Slow");
 306:	84 e2       	ldi	r24, 0x24	; 36
 308:	91 e0       	ldi	r25, 0x01	; 1
 30a:	0e 94 01 01 	call	0x202	; 0x202 <LCD_string>
				TCNT1 = 0;
 30e:	1d bc       	out	0x2d, r1	; 45
 310:	1c bc       	out	0x2c, r1	; 44
				count = '1';
 312:	81 e3       	ldi	r24, 0x31	; 49
 314:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			}
			motorSpeed(1);
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	0e 94 1d 01 	call	0x23a	; 0x23a <motorSpeed>
 31e:	df cf       	rjmp	.-66     	; 0x2de <main+0x56>
		}
		else if (key == '2') {
 320:	c2 33       	cpi	r28, 0x32	; 50
 322:	a1 f4       	brne	.+40     	; 0x34c <main+0xc4>
			if (count == '0') {
 324:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 328:	80 33       	cpi	r24, 0x30	; 48
 32a:	61 f4       	brne	.+24     	; 0x344 <main+0xbc>
				LCD_command(0x80); // Set cursor to first line
 32c:	80 e8       	ldi	r24, 0x80	; 128
 32e:	0e 94 84 00 	call	0x108	; 0x108 <LCD_command>
				LCD_string("Fan Status: Medium");
 332:	85 e3       	ldi	r24, 0x35	; 53
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	0e 94 01 01 	call	0x202	; 0x202 <LCD_string>
				TCNT1 = 0;
 33a:	1d bc       	out	0x2d, r1	; 45
 33c:	1c bc       	out	0x2c, r1	; 44
				count = '1';
 33e:	81 e3       	ldi	r24, 0x31	; 49
 340:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			}
			motorSpeed(2);
 344:	82 e0       	ldi	r24, 0x02	; 2
 346:	0e 94 1d 01 	call	0x23a	; 0x23a <motorSpeed>
 34a:	c9 cf       	rjmp	.-110    	; 0x2de <main+0x56>
		}
		else if (key =='3'){
 34c:	c3 33       	cpi	r28, 0x33	; 51
 34e:	a1 f4       	brne	.+40     	; 0x378 <main+0xf0>
			if (count == '0') {
 350:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 354:	80 33       	cpi	r24, 0x30	; 48
 356:	61 f4       	brne	.+24     	; 0x370 <main+0xe8>
				LCD_command(0x80);
 358:	80 e8       	ldi	r24, 0x80	; 128
 35a:	0e 94 84 00 	call	0x108	; 0x108 <LCD_command>
				LCD_string("Fan Status: Fast");
 35e:	88 e4       	ldi	r24, 0x48	; 72
 360:	91 e0       	ldi	r25, 0x01	; 1
 362:	0e 94 01 01 	call	0x202	; 0x202 <LCD_string>
				TCNT1 = 0;
 366:	1d bc       	out	0x2d, r1	; 45
 368:	1c bc       	out	0x2c, r1	; 44
				count = '1';
 36a:	81 e3       	ldi	r24, 0x31	; 49
 36c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			}
			motorSpeed(3);
 370:	83 e0       	ldi	r24, 0x03	; 3
 372:	0e 94 1d 01 	call	0x23a	; 0x23a <motorSpeed>
 376:	b3 cf       	rjmp	.-154    	; 0x2de <main+0x56>
		}
		else if (key=='0'){
 378:	c0 33       	cpi	r28, 0x30	; 48
 37a:	09 f0       	breq	.+2      	; 0x37e <main+0xf6>
 37c:	b0 cf       	rjmp	.-160    	; 0x2de <main+0x56>
			PORTB=0;
 37e:	18 ba       	out	0x18, r1	; 24
			// Display "Fan Status: OFF" message
			if (count=='0'){
 380:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 384:	80 33       	cpi	r24, 0x30	; 48
 386:	09 f0       	breq	.+2      	; 0x38a <main+0x102>
 388:	aa cf       	rjmp	.-172    	; 0x2de <main+0x56>
				LCD_command(0x80); // Set cursor to first line
 38a:	80 e8       	ldi	r24, 0x80	; 128
 38c:	0e 94 84 00 	call	0x108	; 0x108 <LCD_command>
				LCD_string("Fan Status: OFF");
 390:	89 e5       	ldi	r24, 0x59	; 89
 392:	91 e0       	ldi	r25, 0x01	; 1
 394:	0e 94 01 01 	call	0x202	; 0x202 <LCD_string>
				// Delay for a certain period
				delay_ms(2000); // Delay for 2 seconds
 398:	80 ed       	ldi	r24, 0xD0	; 208
 39a:	97 e0       	ldi	r25, 0x07	; 7
 39c:	0e 94 0e 01 	call	0x21c	; 0x21c <delay_ms>
				// Clear the display
				LCD_command(0x01); // Clear display
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	0e 94 84 00 	call	0x108	; 0x108 <LCD_command>
				count='1';
 3a6:	81 e3       	ldi	r24, 0x31	; 49
 3a8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 3ac:	98 cf       	rjmp	.-208    	; 0x2de <main+0x56>

000003ae <_exit>:
 3ae:	f8 94       	cli

000003b0 <__stop_program>:
 3b0:	ff cf       	rjmp	.-2      	; 0x3b0 <__stop_program>
